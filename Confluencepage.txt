üß© Part 1: Flask Backend Scheduler (Primary Option)

Below is a Python Flask-based scheduler job that:

Runs once every day automatically (using APScheduler)

Also provides a manual trigger endpoint (/run_user_recertification)

Connects to Oracle via cx_Oracle

Updates USER_TAB based on RECREATE_RESPONSE as per your logic



---

‚úÖ Python Flask Scheduler Code

from flask import Flask, jsonify
from apscheduler.schedulers.background import BackgroundScheduler
import cx_Oracle
import datetime

app = Flask(__name__)

# Oracle DB connection details
DB_USER = "your_username"
DB_PASSWORD = "your_password"
DB_DSN = "your_host:your_port/your_service_name"  # e.g., "10.10.20.30:1521/ORCL"

def process_user_recertification():
    try:
        conn = cx_Oracle.connect(DB_USER, DB_PASSWORD, DB_DSN)
        cursor = conn.cursor()

        print(f"[{datetime.datetime.now()}] Scheduler started...")

        # Fetch records where access_status = 'Revoked'
        select_sql = """
            SELECT REPORTIES_ID
            FROM RECREATE_RESPONSE
            WHERE ACCESS_STATUS = 'Revoked'
        """
        cursor.execute(select_sql)
        revoked_records = cursor.fetchall()

        if not revoked_records:
            print("No revoked users found.")
        else:
            print(f"Found {len(revoked_records)} revoked users. Updating...")

            # Prepare update SQLs
            update_recreate_sql = """
                UPDATE RECREATE_RESPONSE
                SET ISACTIVE = 1
                WHERE REPORTIES_ID = :1
            """
            update_user_sql = """
                UPDATE USER_TAB
                SET RAP = 1
                WHERE USER_ID = :1
            """

            for (reportee_id,) in revoked_records:
                cursor.execute(update_recreate_sql, (reportee_id,))
                cursor.execute(update_user_sql, (reportee_id,))

            conn.commit()
            print("Updates committed successfully.")

        cursor.close()
        conn.close()

    except Exception as e:
        print("Error in scheduler:", e)


# Scheduler Setup
scheduler = BackgroundScheduler()
scheduler.add_job(process_user_recertification, 'interval', days=1, id='user_recert_scheduler')
scheduler.start()


@app.route('/run_user_recertification', methods=['GET'])
def run_scheduler_now():
    """Manual trigger endpoint"""
    process_user_recertification()
    return jsonify({"message": "User recertification process executed successfully"})


@app.route('/')
def home():
    return jsonify({
        "status": "Scheduler is running",
        "manual_trigger": "/run_user_recertification"
    })


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)


---

‚öôÔ∏è How it works

The scheduler runs daily (once every 24 hours).

It finds all records in RECREATE_RESPONSE where ACCESS_STATUS = 'Revoked'.

For each matching record:

It sets ISACTIVE = 1 in RECREATE_RESPONSE

Updates USER_TAB ‚Üí sets RAP = 1 where USER_ID = REPORTIES_ID


You can also manually trigger it by hitting:

http://localhost:5001/run_user_recertification



---

üß™ Testing locally

1. Install dependencies:

pip install flask apscheduler cx_Oracle


2. Run the app:

python app.py


3. Check:

Automatic daily job (runs in background)

Manual trigger at:
http://localhost:5001/run_user_recertification





---

‚öôÔ∏è Part 2: Standalone Python Script (for Control-M)

You can also use this version ‚Äî same logic, no Flask:

import cx_Oracle
import datetime

DB_USER = "your_username"
DB_PASSWORD = "your_password"
DB_DSN = "your_host:your_port/your_service_name"

def process_user_recertification():
    try:
        conn = cx_Oracle.connect(DB_USER, DB_PASSWORD, DB_DSN)
        cursor = conn.cursor()

        print(f"[{datetime.datetime.now()}] Recertification job started...")

        select_sql = """
            SELECT REPORTIES_ID
            FROM RECREATE_RESPONSE
            WHERE ACCESS_STATUS = 'Revoked'
        """
        cursor.execute(select_sql)
        revoked_records = cursor.fetchall()

        if not revoked_records:
            print("No revoked users found.")
        else:
            print(f"Found {len(revoked_records)} revoked users. Updating...")

            update_recreate_sql = """
                UPDATE RECREATE_RESPONSE
                SET ISACTIVE = 1
                WHERE REPORTIES_ID = :1
            """
            update_user_sql = """
                UPDATE USER_TAB
                SET RAP = 1
                WHERE USER_ID = :1
            """

            for (reportee_id,) in revoked_records:
                cursor.execute(update_recreate_sql, (reportee_id,))
                cursor.execute(update_user_sql, (reportee_id,))

            conn.commit()
            print("Updates committed successfully.")

        cursor.close()
        conn.close()

    except Exception as e:
        print("Error during execution:", e)

if __name__ == "__main__":
    process_user_recertification()

You can schedule this file via Control-M or any cron scheduler.


---
